<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>224</x>
      <y>184</y>
      <w>408</w>
      <h>348</h>
    </coordinates>
    <panel_attributes>**SGLRenderer**
Upp::SGLRenderer
--
**Public**
MeshData&amp; InsertPickMeshData(const String&amp; name, MeshData&amp;&amp; model)
MeshData&amp; InsertCloneMeshData(const String&amp; name, const MeshData&amp; model)
MeshData&amp; CreateMeshData(const String&amp; name)
MeshData&amp; GetMeshData(const String&amp; name)
MeshData&amp; GetMeshData(int position)
const MeshData&amp; GetMeshData(const String&amp; name)const
const MeshData&amp; GetMeshData(int position)const
int GetMeshPosition(const String&amp; name)
bool HasMeshData(const String&amp; name)
bool RemoveMeshData(const String&amp; name)

Renderer&amp; InsertPickRenderer(const String&amp; name, Renderer&amp;&amp; renderer)
Renderer&amp; InsertCloneRenderer(const String&amp; name, const Renderer&amp; renderer)
Renderer&amp; CreateRenderer(const String&amp; name)
Renderer&amp; GetRenderer(const String&amp; name)
Renderer&amp; GetRenderer(int position)
const Renderer&amp; GetRenderer(const String&amp; name)const
const Renderer&amp; GetRenderer(int position)const
int GetRendererPosition(const String&amp; name)
bool HasRenderer(const String&amp; name)
bool RemoveRenderer(const String&amp; name)

Texture&amp; CreateTexture(const String&amp; name)
Texture&amp; CreateLoadTexture(const String&amp; name, const Image&amp; img, GLenum target, bool mipmap, const Vector&lt;TextureLoaderParameters&gt;&amp; loaderParameters)
Texture&amp; GetTexture(const String&amp; name)
const Texture&amp; GetTexture(const String&amp; name)const
Texture&amp; GetTexture(int position)
const Texture&amp; GetTexture(int position)const
int GetTexturePosition(const String&amp; name)
bool HasTexture(const String&amp; name)
bool RemoveTexture(const String&amp; name)

void AddToRenderQueue(Renderer&amp; renderer, MeshData&amp; meshData, Object&amp; object)

String GetName()const
virtual String ToString()const

VectorMap&lt;String, MeshData&gt;&amp; GetModels()
VectorMap&lt;String, Renderer&gt;&amp; GetRenderers()}
VectorMap&lt;String, Texture&gt;&amp; GetTextures()

const VectorMap&lt;String, MeshData&gt;&amp; GetModels()const
const VectorMap&lt;String, Renderer&gt;&amp; GetRenderers()const
const VectorMap&lt;String, Texture&gt;&amp; GetTextures()const	

virtual void AfterUpdate()

--
- Allow creation of MeshData object (also called Model), Renderer object allowing to define shader and a way of rendering MeshData, and finally
  it also allow creation of texture Object to add texture to some object ! 
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>628</x>
      <y>228</y>
      <w>92</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=0..n
Identified by a String</panel_attributes>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>712</x>
      <y>196</y>
      <w>312</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>**MeshData**
Upp::MeshData
--
**Public**
MeshData&amp; AddMesh(const Vector&lt;GLfloat&gt;&amp;, const Vector&lt;GLfloat&gt;&amp;, const Vector&lt;GLfloat&gt;&amp;, const Vector&lt;GLfloat&gt;&amp;)
MeshData&amp; Load()
bool IsLoaded()
GLuint GetVBO()
Vector&lt;Mesh&gt;&amp; GetMeshes()
String ToString()const
--
-MeshData represente data of a complete 3D object, it is divided in many mesh.
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>108</y>
      <w>148</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>**Mesh**
Upp::Mesh
--
**Public**
int GetIndice()const
int GetVertexCount()const
--
-representation of a single Mesh of an complete 3D object
 identied by an offset (indice) and a vertexcount.
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>868</x>
      <y>160</y>
      <w>20</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=0..n
</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>628</x>
      <y>328</y>
      <w>204</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=0..n
Identified by a String</panel_attributes>
    <additional_attributes>10.0;20.0;490.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>824</x>
      <y>296</y>
      <w>208</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>**Renderer**
Upp::Renderer
--
**Public**
void Render(MeshData&amp; meshData)
void GenerateVAO()
ShaderProgram&amp; GetShaderProgram()
GLuint GetVAO()
Renderer&amp; SetVAO(GLuint _vao)
Renderer&amp; SetUniformProjectionMatrixName(const String&amp; name)
Renderer&amp; SetUniformViewMatrixName(const String&amp; name)
Renderer&amp; SetBeforeRendering(Event&lt;Renderer&amp;, CGLCamera&amp;&gt; event)
String ToString()const
--
-Allow user to set routine to render data, set the way data 
 should be read (via VAO), and, it allow to define Shader  
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1028</x>
      <y>328</y>
      <w>68</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=1
</panel_attributes>
    <additional_attributes>10.0;20.0;150.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1088</x>
      <y>168</y>
      <w>224</w>
      <h>348</h>
    </coordinates>
    <panel_attributes>**ShaderProgram**
Upp::ShaderProgram
--
**Public**
String GetName()const
GLuint GetID()const
bool ContainVertex()const
bool ContainTCS()const
bool ContainTES()const
bool ContainGeometry()const
bool ContainFragment()const
String GetLogs()const
bool IsLinked()const

ShaderProgram&amp; LoadFromFile(String filepath, ShaderType type)
ShaderProgram&amp; LoadFromString(String str, ShaderType type)
ShaderProgram&amp; Link()

void Bind()
void Unbind()

ShaderProgram&amp; BindAttribute(String attributName, unsigned int layout)
ShaderProgram&amp; LoadAttribute()
virtual ShaderProgram&amp; BindAttributes() = 0

bool RegisterUniform(String uniformName)
virtual ShaderProgram&amp; BindUniforms() = 0

ShaderProgram&amp; UniformBool(String uniformName, bool value)
ShaderProgram&amp; UniformBool(GLuint uniformLocation, bool value)
ShaderProgram&amp; UniformInt(String uniformName, int value)
ShaderProgram&amp; UniformInt(GLuint uniformLocation, int value)
ShaderProgram&amp; UniformFloat(String uniformName, float value)
ShaderProgram&amp; UniformFloat(GLuint uniformLocation, float value)
ShaderProgram&amp; UniformVec2(String uniformName, const glm::vec2 &amp;value)
ShaderProgram&amp; UniformVec2(GLuint uniformLocation, const glm::vec2 &amp;value)
ShaderProgram&amp; UniformVec2(String uniformName, float x, float y)
ShaderProgram&amp; UniformVec2(GLuint uniformLocation, float x, float y)
ShaderProgram&amp; UniformVec3(String uniformName, const glm::vec3 &amp;value)
ShaderProgram&amp; UniformVec3(GLuint uniformLocation, const glm::vec3 &amp;value)
ShaderProgram&amp; UniformVec3(String uniformName, float x, float y, float z)
ShaderProgram&amp; UniformVec3(GLuint uniformLocation, float x, float y, float z)
ShaderProgram&amp; UniformVec4(String uniformName, const glm::vec4 &amp;value)
ShaderProgram&amp; UniformVec4(GLuint uniformLocation, const glm::vec4 &amp;value)
ShaderProgram&amp; UniformVec4(String uniformName, float x, float y, float z, float w)
ShaderProgram&amp; UniformVec4(GLuint uniformLocation, float x, float y, float z, float w)
ShaderProgram&amp; UniformMat2(String uniformName, const glm::mat2 &amp;mat)
ShaderProgram&amp; UniformMat2(GLuint uniformLocation, const glm::mat2 &amp;mat)
ShaderProgram&amp; UniformMat3(String uniformName, const glm::mat3 &amp;mat)
ShaderProgram&amp; UniformMat3(GLuint uniformLocation, const glm::mat3 &amp;mat)
ShaderProgram&amp; UniformMat4(String uniformName, const glm::mat4 &amp;mat)
ShaderProgram&amp; UniformMat4(GLuint uniformLocation, const glm::mat4 &amp;mat)

--
- Allow load and manipulation of shader
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>708</x>
      <y>408</y>
      <w>360</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>**Texture**
Upp::Texture
--
**Public**
GLuint GetID()const
GLenum GetTarget()const
bool IsLoaded()const
Texture&amp; Bind()
Texture&amp; Unbind()
bool Load(const Image&amp; img,GLenum _target, bool mipmap, const Vector&lt;TextureLoaderParameters&gt;&amp;)
void CreateTexture(GLenum _target)
void LoadParameters(const Vector&lt;TextureLoaderParameters&gt;&amp;)
bool LoadImages(const Vector&lt;Image&gt;&amp; images, GLenum target, GLint level, GLint internalFormat, GLint format, GLenum type, bool mipmap)
const String ToString()const
--
- Allow load of texture
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>628</x>
      <y>452</y>
      <w>88</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=0..n
Identified by a String</panel_attributes>
    <additional_attributes>10.0;20.0;200.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>708</x>
      <y>576</y>
      <w>220</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>symbol=component
**CGLRenderer**
Upp::CGLRenderer
Instanciation constraint : NONE
--
**Public**
CGLRenderer&amp; SetRenderer(const String&amp; rendererName)
CGLRenderer&amp; SetModelMatrixUniformName(const String&amp; uniformModelMatrix)

virtual void Update(double timeEllapsed, double deltaTime = 0.0)

virtual String GetName()const
virtual String ToString()const
--
-This component allow an object to reference a Renderer object and define
 some routine to do when renderer is loaded, it also allow object to define
 some uniform name to be used in the routine.
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>720</x>
      <y>704</y>
      <w>148</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>symbol=component
**CGLColor**
Upp::CGLColor
Instanciation constraint : NONE
--
**Public**
CGLColor&amp; SetColor(float r, float g, float b, float a)
CGLColor&amp; SetColor(int r, int g, int b, int a)
CGLColor&amp; SetUniformName(const String&amp; _name)

virtual String ToString()const
virtual String GetName()const
--
-This component allow an object to reference 
 a model that will be used by renderer
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>324</x>
      <y>756</y>
      <w>148</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>symbol=component
**CGLModel**
Upp::CGLModel
Instanciation constraint : NONE
--
**Public**
CGLModel&amp; SetModel(const String&amp; modelName)
virtual String ToString()const
--
-This component allow an object to reference 
 a model that will be used by renderer
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>324</x>
      <y>644</y>
      <w>304</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>symbol=component
**CGLRoutineBeforeAfterRendering**
Upp::CGLRoutineBeforeAfterRendering
Instanciation constraint : NONE
--
**Public**
CGLRoutineBeforeAfterRendering&amp; SetBeforeRendering(const Event&lt;Renderer&amp;, CGLCamera&amp;, Object&amp;&gt;&amp; event)
CGLRoutineBeforeAfterRendering&amp; SetAfterRendering(const Event&lt;Renderer&amp;, CGLCamera&amp;, Object&amp;&gt;&amp; event)

virtual String GetName()const
virtual String ToString()const

--
-This component allow lambda function/Routine to be executed before and after rendering an object.
 Before lambda is call right after renderer binding. After lambda is executed after draw command called
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>184</x>
      <y>684</y>
      <w>80</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>symbol=component
**Component**
Upp::Component
{Abstract Class}
--
Component from UFE core
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>700</y>
      <w>72</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0;100.0;210.0;160.0;210.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>696</y>
      <w>72</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;20.0;160.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>624</y>
      <w>92</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;180.0;110.0;180.0;110.0;10.0;210.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>692</y>
      <w>104</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0;110.0;130.0;240.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>704</x>
      <y>808</y>
      <w>204</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>symbol=component
**CGLTexture**
Upp::CGLTexture
Instanciation constraint : NONE
--
**Public**
CGLTexture&amp; SetTexture(const String&amp; textureName)
CGLTexture&amp; SetChannelToUse(unsigned int channel)
CGLTexture&amp; SetUniformName(const String&amp; name)

virtual String ToString()const
virtual String GetName()const
--
-This component allow an object to reference a texture, inherritance from C
 GLRoutineBeforeAfterRendering allow definition of event to set uniform
 and texture binding properly before rendering
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>692</y>
      <w>88</w>
      <h>172</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0;110.0;410.0;200.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>948</x>
      <y>628</y>
      <w>220</w>
      <h>124</h>
    </coordinates>
    <panel_attributes>symbol=component
**CGLSkyBox**
Upp::CGLSkyBox
Instanciation constraint : ONE_BY_SCENE
--
**Public**
String GetRendererName()const
String GetTextureName()const
String GetMeshDataName()const

bool LoadSkybox()
void Update(double timeEllapsed, double deltaTime = 0.0)

virtual String ToString()const
virtual String GetName()const
--
-Skybox allow a scene to have a skybox by setting all 6 images of this component and
 then call LoadSkybox function. 
 The component will generate into SGLRenderer the shader/renderer/model to be
 use to draw the skybox it also set before after rendering event.
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>688</y>
      <w>332</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;20.0;810.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>104</x>
      <y>84</y>
      <w>1216</w>
      <h>464</h>
    </coordinates>
    <panel_attributes>halign=left
Service provided by OpenGLRenderer plugin
fontsize=48
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>112</x>
      <y>328</y>
      <w>80</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>**Service**
Upp::Service
{Abstract Class}
--
Service from UFE core
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>188</x>
      <y>336</y>
      <w>44</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Public</panel_attributes>
    <additional_attributes>10.0;20.0;90.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>152</x>
      <y>568</y>
      <w>1068</w>
      <h>352</h>
    </coordinates>
    <panel_attributes>halign=left
Components provided by OpenGLRenderer plugin
fontsize=48
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>468</x>
      <y>248</y>
      <w>252</w>
      <h>552</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;1360.0;420.0;1360.0;420.0;10.0;610.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>700</x>
      <y>360</y>
      <w>132</w>
      <h>256</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>20.0;620.0;10.0;620.0;10.0;10.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>904</x>
      <y>508</y>
      <w>40</w>
      <h>364</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;890.0;80.0;890.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>100</x>
      <y>0</y>
      <w>516</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>halign=left
fontsize=99
Ultimate Framework Engine
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>132</x>
      <y>44</y>
      <w>448</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>halign=left
fontsize=57
Class diagram of OpenGLRenderer plugin
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>616</x>
      <y>44</y>
      <w>412</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>628</x>
      <y>48</y>
      <w>48</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>680</x>
      <y>52</y>
      <w>104</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>halign=left
fontsize=25
Class from UFE core
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>804</x>
      <y>56</y>
      <w>64</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>864</x>
      <y>52</y>
      <w>164</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>halign=left
fontsize=25
Component reference plugin class
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
